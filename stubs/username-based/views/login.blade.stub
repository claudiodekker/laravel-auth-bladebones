<script src="https://unpkg.com/vue@3"></script>
<script>
  const BLADE_INJECTED_VARIABLES = {{ Illuminate\Support\Js::from([
    "endpoint" => route("login"),
    "headers" => [
        "X-CSRF-TOKEN" => csrf_token(),
    ],
    "options" => $options,
  ]) }};
</script>

<div style="border: 5px solid #FF0000; padding: 4px;">
  <h2>You are using the barebones authentication views.</h2>
  <p>
    Don't worry, you didn't forget to run <i>npm run dev</i> or some other build process, and the installation of laravel-auth finished successfully.<br>
    These views are intentionally kept extremely basic, to make it easier for you to understand the bare minimum required code, and to customize it to your own liking, without having to remove a bunch of default styling first.<br /><br />

    If you want prettier default views, you can require and install a view-preset package (such as <a href="https://github.com/claudiodekker/laravel-auth-inertia" rel="noreferrer noopener" target="_blank">the inertia one</a>, which internally extends the laravel-auth package) instead.
  </p>
</div>

<h1>Login</h1>
<a href="{{ route('register') }}">Not yet registered?</a>
<a href="{{ route('recover-account') }}">Account Recovery</a>

<!-- Error Messages Component -->
<script type="text/x-template" id="error-messages">
  <div v-if="hasErrors">
    An error has occurred.
    <ul>
      <li v-for="error in messages">@{{ error }}</li>
    </ul>
  </div>
</script>
<script>
  const errorMessages = {
    template: '#error-messages',
    props: {
      errors: {
        required: true,
      },
    },
    computed: {
      hasErrors() {
        return Object.keys(this.errors || {}).length > 0
      },
      messages() {
        if (!this.hasErrors) {
          return []
        }

        return Object.values(this.errors.errors || {}).reduce((carry, field) => carry.concat(field), [])
      },
    },
  }
</script>

<!-- Login Form Component -->
<script type="text/x-template" id="login-form">
  <h2 v-if="usesConditionalMediation">Conditional Mediation</h2>
  <h2 v-else-if="passkeyBased">Passkey-based authentication</h2>
  <h2 v-else>Password-based authentication</h2>
  <error-messages :errors="errors" />

  <template v-if="state === 'waiting'">
    <h3>Waiting for passkey</h3>
    <span>Please follow your browser's instructions to authenticate.</span>
  </template>
  <template v-else-if="state === 'submitting'">
    <h3>Please wait...</h3>
    <span>We're attempting to sign you in.</span>
  </template>
  <template v-else-if="state === 'failed'">
    <h3>Passkey-based Authentication Failed</h3>

    {{--    Note: This state this can instantly occur when you're on an "insecure" environment, without any logged errors.--}}

    {{--    To solve this, make sure that the following things are set up correctly:--}}
    {{--    - Your (local) environment is using a valid non-local domain name (e.g. my-laravel-app.test).--}}
    {{--    - The connection to the page is 100% secure (e.g. no mixed content / no requests to http:// at all).--}}
    {{--    - The relying_party configured in the app matches the domain name used.--}}

    {{--    On a local environment, you can use a self-signed certificate to get this to work. If you're using--}}
    {{--    Laravel Valet, you can easily configure one for this device by using the "valet secure" command.--}}

    <form @submit.prevent="reset">
      <button type="submit">
        Try again
      </button>
    </form>
  </template>
  <template v-else>
    <span v-if="usesConditionalMediation">
      This form allows you to authenticate both using an username and password, but also using WebAuthn through "Conditional Mediation".
      In short, Conditional Mediation enables WebAuthn through autofill-selectable values, similar to regular password autofilling.
    </span>
    <span v-else-if="! isWebAuthnSupported || ! passkeyBased">
      This form allows you to authenticate using your password-based account.
      <a v-if="isWebAuthnSupported" href="#" @click.prevent="toggleForm">You can click here to use a passkey-based account instead.</a>
    </span>
    <span v-else>
      This form allows you to authenticate using your passkey-based account.
      <a href="#" @click.prevent="toggleForm">You can click here to use a password-based account instead.</a>
    </span>

    <form @submit.prevent="submit">
      <template v-if="usesConditionalMediation || ! passkeyBased">
        <label>
          <span>Username</span>
          <input type="text" name="username" v-model="form.username" required autocomplete="username webauthn" />
        </label>
        <label>
          <span>Password</span>
          <input type="password" name="password" v-model="form.password" ref="password" autocomplete="current-password webauthn" />
        </label>
      </template>
      <label>
        <span>Remember me</span>
        <input type="checkbox" name="remember" v-model="form.remember" />
      </label>
      <button type="submit">
        Sign in
      </button>
    </form>
  </template>
</script>
<script>
  const loginForm = {
    template: '#login-form',
    components: {
      'error-messages': errorMessages,
    },
    props: {
      options: {
        type: Object,
        required: true,
      },
      endpoint: {
        type: String,
        required: true,
      },
      headers: {
        type: Object,
        default: () => ({}),
      },
    },
    data: () => ({
      form: {
        username: '',
        password: '',
        remember: false,
      },
      errors: null,
      state: 'default',
      passkeyBased: false,
      conditionalAbort: null,
      usesConditionalMediation: false,
    }),
    computed: {
      /*
       * Determines whether this browser supports WebAuthn (passkey-based credentials).
       */
      isWebAuthnSupported() {
        return typeof PublicKeyCredential !== "undefined"
          && typeof PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable === 'function'
      },
      /**
       * Determines whether the form is currently busy.
       */
      processing() {
        return this.state === 'submitting'
      },
      /**
       * Decodes the options object encoded by the server, so that the browser's credential management API can use it.
       *
       * @see https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialrequestoptions
       */
      publicKeyRequestOptions() {
        const fixPadding = (input) => (input.length % 4 !== 0 ? input + '='.repeat(4 - (input.length % 4)) : input)
        const normalizeBase64 = (input) => fixPadding(input.replace(/-/g, '+').replace(/_/g, '/'))
        const base64Decode = (input) => atob(normalizeBase64(input))
        const base64ToByteArray = (input) => Uint8Array.from([...base64Decode(input)].map((c) => c.charCodeAt(0)))

        const options = toRaw(this.options)

        return {
          ...options,
          challenge: base64ToByteArray(options.challenge),
        }
      },
    },
    async mounted() {
      // Next, let's actually attempt to start conditional webauthn authentication.
      // This enables us to show the possible passkeys (WebAuthn credentials) as part of an input's auto-fill dropdown.
      this.attemptConditionalWebauthnLogin()
      this.fixNotAllowedBugOnIosPageLoad()
    },
    methods: {
      /*
       * Determines whether this browser supports Conditional Mediation.
       */
      async isConditionalMediationAvailable() {
        if (! this.isWebAuthnSupported || typeof PublicKeyCredential.isConditionalMediationAvailable !== 'function') {
          return false
        }

        return PublicKeyCredential.isConditionalMediationAvailable()
      },
      /**
       * Toggles between the password-based and passkey-based login forms.
       */
      toggleForm() {
        this.passkeyBased ^= true
      },
      /**
       * Clears the form's password input fields.
       */
      clearPasswordFields() {
        this.form.password = ''
      },
      /**
       * This function encodes the asserted credential (read: auth. signature), so that it can be used by the server.
       *
       * @see https://www.w3.org/TR/webauthn-2/#iface-pkcredential
       * @see https://www.w3.org/TR/webauthn-2/#ref-for-authenticatorresponse⑥
       */
      prepareAssertedCredential(credential) {
        const arrayBufferToBase64 = (input) => btoa(String.fromCharCode(...new Uint8Array(input)))
          .replace(/\+/g, '-')
          .replace(/\//g, '_')
          .replace(/=+$/, '')

        return {
          id: credential.id,
          rawId: arrayBufferToBase64(credential.rawId),
          response: {
            clientDataJSON: arrayBufferToBase64(credential.response.clientDataJSON),
            /** https://www.w3.org/TR/webauthn-2/#ref-for-authenticatorresponse⑥ */
            authenticatorData: arrayBufferToBase64(credential.response.authenticatorData),
            signature: arrayBufferToBase64(credential.response.signature),
            ...(credential.response.userHandle ? { userHandle: arrayBufferToBase64(credential.response.userHandle) } : {}),
          },
          type: credential.type,
        }
      },
      /**
       * Attempts to use Conditional Mediation to obtain a WebAuthn credential.
       */
      async obtainConditionalWebauthnCredential() {
        this.conditionalAbort = new AbortController()

        // Using the available options, we'll ask the browser to handle the rest of the creation process.
        // If something goes wrong (e.g. the user reject the request), a promise rejection (error) will be thrown here.
        const credential = await navigator.credentials.get({
          signal: this.conditionalAbort.signal,
          publicKey: this.publicKeyRequestOptions,
          mediation: 'conditional',
        })

        // Now that the asserted credential is created, we'll prepare it for submission to the server.
        return this.prepareAssertedCredential(credential)
      },
      /**
       * Submits the actual passkey-based request.
       */
      async submitPasskeyBasedRequest(credential) {
        this.errors = null
        this.state = 'submitting'

        const response = await fetch(this.endpoint, {
          method: 'POST',
          headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
            ...this.headers,
          },
          body: JSON.stringify({
            type: 'passkey',
            credential: credential,
            remember: this.form.remember,
          }),
        })

        // When the session has expired, reload the page.
        if (response.status === 419) {
          window.location.reload()
          return
        }

        // If the server returned a validation error, we'll want to display it to the user.
        if (response.status === 422) {
          this.errors = await response.json()
          this.state = 'failed'
          return
        }

        // Otherwise, we'll want to make sure we haven't received a different, unexpected error.
        if (response.status !== 200) {
          this.state = 'failed'
          throw new Error('Failed to authenticate (unexpected response from server)')
        }

        // If authentication succeeded, manually redirect the user there.
        window.location.href = (await response.json()).redirect_url
      },
      /**
       * Starts the process of authenticating using WebAuthn's Conditional Mediation.
       *
       * This process doesn't directly prompt the user for a credential, but instead lets the browser
       * know that Conditional Mediation is supported by our app, by providing a Promise-hook that
       * it can resolve when the user wants to authenticate using it.
       *
       * This method is necessary to support Apple Passkeys in iOS 16+ and macOS 13+ (Ventura).
       * It will likely be used by other platforms (such as Android) in the future as well.
       */
      async attemptConditionalWebauthnLogin() {
        if (!this.isWebAuthnSupported) {
          console.log('WebAuthn not supported.')
          return
        }

        // We'll track the current availability of Conditional Mediation, so that the correct form can be displayed.
        this.usesConditionalMediation = await this.isConditionalMediationAvailable()

        if (!this.usesConditionalMediation) {
          console.log('Conditional Mediation Unavailable.')
          return
        }

        let credential
        try {
          // Let the browser know that our app supports Conditional Mediation, by initializing
          // a Promise that won't resolve until the user authenticates (if ever).
          credential = await this.obtainConditionalWebauthnCredential()
        } catch (error) {
          // If Conditional Mediation was aborted, we'll want to just bail silently.
          // The user can still hit the 'Login' button to use WebAuthn manually.
          if (error?.name === 'AbortError') {
            return
          }

          console.error(e)
          this.state = 'failed'
          return
        }

        await this.submitPasskeyBasedRequest(credential)
      },
      /**
       * Aborts the Conditional Mediation attempt.
       */
      abortConditionalWebauthnLogin() {
        this.conditionalAbort?.abort()
        this.conditionalAbort = null
      },
      /**
       * Attempts to obtain a WebAuthn credential.
       */
      async obtainWebauthnCredential() {
        // Using the available options, we'll ask the browser to handle the rest of the creation process.
        // If something goes wrong (e.g. the user reject the request), a promise rejection (error) will be thrown here.
        const credential = await navigator.credentials.get({
          publicKey: this.publicKeyRequestOptions,
        })

        // Now that the asserted credential is created, we'll prepare it for submission to the server.
        return this.prepareAssertedCredential(credential)
      },
      /**
       * Handles the process of authenticating using WebAuthn.
       */
      async attemptWebauthnLogin() {
        this.errors = null
        this.state = 'waiting'

        let credential
        try {
          credential = await this.obtainWebauthnCredential()
        } catch (e) {
          console.error(e)
          this.state = 'failed'
          return
        }

        return await this.submitPasskeyBasedRequest(credential)
      },
      /**
       * Handles the process of authenticating using an username and password combination.
       */
      async attemptPasswordBasedLogin() {
        this.errors = null
        this.state = 'submitting'

        const payload = {
          username: this.form.username,
          password: this.form.password,
          remember: this.form.remember,
        }

        this.clearPasswordFields()

        const response = await fetch(this.endpoint, {
          method: 'POST',
          headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
            ...this.headers,
          },
          body: JSON.stringify(payload),
        })

        // When the session has expired, reload the page.
        if (response.status === 419) {
          window.location.reload()
          return
        }

        // If the server returned a validation error, we'll want to display it to the user.
        if (response.status === 422) {
          this.errors = await response.json()
          this.state = 'default'
          this.$nextTick(() => this.$refs.password.focus())
          return
        }

        // Otherwise, we'll want to make sure we haven't received a different, unexpected error.
        if (response.status !== 200) {
          this.state = 'default'
          this.$nextTick(() => this.$refs.password.focus())
          throw new Error('Failed to authenticate (unexpected response from server)')
        }

        // Finally, we'll redirect the user to their destination.
        window.location.href = (await response.json()).redirect_url
      },
      /**
       * Handles the authentication process when the user submits the form.
       */
      async submit() {
        if (this.processing) {
          return
        }

        // We can't use regular WebAuthn when Conditional UI is supported and being used.
        // However, if Conditional UI isn't supported, we'll want regular WebAuthn.
        if (this.isWebAuthnSupported && !(await this.isConditionalMediationAvailable()) && this.form.password.length === 0) {
          return await this.attemptWebauthnLogin()
        }

        return await this.attemptPasswordBasedLogin()
      },
      reset() {
        this.abortConditionalWebauthnLogin()
        this.errors = null
        this.state = 'default'
        this.attemptConditionalWebauthnLogin()
      },
      fixNotAllowedBugOnIosPageLoad() {
        // For some reason, on iOS 16 (at least on the beta version), the browser will not properly let go of the
        // previous page state when (re)loading. As a result, when you try to initialize conditional mediation,
        // it immediately fails with a "NotAllowedError: Operation failed." error, which shouldn't happen.
        // To 'fix' this, we'll just wait a bit for the error to occur (if any) and re-init the state.
        // This also isn't a bug with our implementation, as it also occurs with other ones.
        let shouldHandleBug = true

        const interval = setInterval(() => {
          if (this.state === 'failed') {
            shouldHandleBug = false
            clearInterval(interval)
            this.reset()
          }
        }, 5)

        // If the bug hasn't occurred within half a second, we'll unload our fix.
        setTimeout(() => shouldHandleBug && clearInterval(interval), 500)
      },
    },
  }
</script>

<!-- Root Page Component -->
<div id="app">JavaScript is required to authenticate.</div>
<script type="text/x-template" id="vue-login-root">
  <login-form :options="bladeVariables.options" :endpoint="bladeVariables.endpoint" :headers="bladeVariables.headers"  />
</script>
<script>
  const { createApp, toRaw } = Vue

  createApp({
    template: '#vue-login-root',
    components: {
      'login-form': loginForm,
    },
    data: () => ({
      bladeVariables: BLADE_INJECTED_VARIABLES,
    }),
  }).mount('#app')
</script>
